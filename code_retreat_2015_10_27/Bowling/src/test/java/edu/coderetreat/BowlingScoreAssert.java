package edu.coderetreat;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;

/**
 * {@link BowlingScore} specific assertions - Generated by CustomAssertionGenerator.
 */
public class BowlingScoreAssert extends
		AbstractAssert<BowlingScoreAssert, BowlingScore> {

	/**
	 * Creates a new </code>{@link BowlingScoreAssert}</code> to make assertions on actual BowlingScore.
	 * @param actual the BowlingScore we want to make assertions on.
	 */
	public BowlingScoreAssert(BowlingScore actual) {
		super(actual, BowlingScoreAssert.class);
	}

	/**
	 * An entry point for BowlingScoreAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(myBowlingScore)</code> and get specific assertion with code completion.
	 * @param actual the BowlingScore we want to make assertions on.
	 * @return a new </code>{@link BowlingScoreAssert}</code>
	 */
	public static BowlingScoreAssert assertThat(BowlingScore actual) {
		return new BowlingScoreAssert(actual);
	}

	/**
	 * Verifies that the actual BowlingScore is finished.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual BowlingScore is not finished.
	 */
	public BowlingScoreAssert isFinished() {
		// check that actual BowlingScore we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format(
				"Expected actual BowlingScore to be finished but was not.",
				actual);

		// check
		if (!actual.isFinished())
			throw new AssertionError(errorMessage);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual BowlingScore is not finished.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual BowlingScore is finished.
	 */
	public BowlingScoreAssert isNotFinished() {
		// check that actual BowlingScore we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format(
				"Expected actual BowlingScore not to be finished but was.",
				actual);

		// check
		if (actual.isFinished())
			throw new AssertionError(errorMessage);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual BowlingScore's frameNumber is equal to the given one.
	 * @param frameNumber the given frameNumber to compare the actual BowlingScore's frameNumber to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual BowlingScore's frameNumber is not equal to the given one.
	 */
	public BowlingScoreAssert hasFrameNumber(int frameNumber) {
		// check that actual BowlingScore we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format(
				"\nExpected <%s> frameNumber to be:\n  <%s>\n but was:\n  <%s>",
				actual, frameNumber, actual.getFrameNumber());

		// check
		if (actual.getFrameNumber() != frameNumber) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual BowlingScore's score is equal to the given one.
	 * @param score the given score to compare the actual BowlingScore's score to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual BowlingScore's score is not equal to the given one.
	 */
	public BowlingScoreAssert hasScore(int score) {
		// check that actual BowlingScore we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format(
				"\nExpected <%s> score to be:\n  <%s>\n but was:\n  <%s>",
				actual, score, actual.getScore());

		// check
		if (actual.getScore() != score) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

}
